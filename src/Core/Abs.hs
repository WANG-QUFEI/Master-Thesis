-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

module Core.Abs where

import Prelude (Char, Double, Int, Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)

newtype Id = Id ((Int, Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Program = Prog [Exp]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Exp
    = EPostu Id Exp
    | EVar Id
    | ESet
    | EAPP Exp Exp
    | EArrow Exp Exp
    | EAbs Exp Exp
    | EDec Decl Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Decl = Def Id Exp Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

