-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module Core.Par
  ( happyError
  , myLexer
  , pExp1
  , pExp3
  , pExp
  , pExp2
  , pDecl
  , pPatt
  , pPatt1
  , pSummand
  , pListSummand
  , pBranch
  , pListBranch
  , pListIdent
  ) where
import qualified Core.Abs
import Core.Lex
}

%name pExp1 Exp1
%name pExp3 Exp3
%name pExp Exp
%name pExp2 Exp2
%name pDecl Decl
%name pPatt Patt
%name pPatt1 Patt1
%name pSummand Summand
%name pListSummand ListSummand
%name pBranch Branch
%name pListBranch ListBranch
%name pListIdent ListIdent
-- no lexer declaration
%monad { Either String } { (>>=) } { return }
%tokentype {Token}
%token
  '$' { PT _ (TS _ 1) }
  '(' { PT _ (TS _ 2) }
  ')' { PT _ (TS _ 3) }
  '*' { PT _ (TS _ 4) }
  ',' { PT _ (TS _ 5) }
  '->' { PT _ (TS _ 6) }
  '.' { PT _ (TS _ 7) }
  '.1' { PT _ (TS _ 8) }
  '.2' { PT _ (TS _ 9) }
  '0' { PT _ (TS _ 10) }
  '1' { PT _ (TS _ 11) }
  ':' { PT _ (TS _ 12) }
  ';' { PT _ (TS _ 13) }
  '=' { PT _ (TS _ 14) }
  'PN' { PT _ (TS _ 15) }
  'Pi' { PT _ (TS _ 16) }
  'Sig' { PT _ (TS _ 17) }
  'U' { PT _ (TS _ 18) }
  'Void' { PT _ (TS _ 19) }
  '\\' { PT _ (TS _ 20) }
  '_' { PT _ (TS _ 21) }
  'let' { PT _ (TS _ 22) }
  'letrec' { PT _ (TS _ 23) }
  '|' { PT _ (TS _ 24) }
  L_Ident  { PT _ (TV $$) }
  L_CaseTk { PT _ (T_CaseTk _) }
  L_DataTk { PT _ (T_DataTk _) }

%%

Ident :: { Core.Abs.Ident}
Ident  : L_Ident { Core.Abs.Ident $1 }

CaseTk :: { Core.Abs.CaseTk}
CaseTk  : L_CaseTk { Core.Abs.CaseTk (mkPosToken $1) }

DataTk :: { Core.Abs.DataTk}
DataTk  : L_DataTk { Core.Abs.DataTk (mkPosToken $1) }

Exp1 :: { Core.Abs.Exp }
Exp1 : '\\' Patt1 '.' Exp1 { Core.Abs.ELam $2 $4 }
     | 'Pi' Patt1 ':' Exp1 '.' Exp1 { Core.Abs.EPi $2 $4 $6 }
     | 'Sig' Patt1 ':' Exp1 '.' Exp1 { Core.Abs.ESig $2 $4 $6 }
     | DataTk '(' ListSummand ')' { Core.Abs.EData $1 $3 }
     | CaseTk '(' ListBranch ')' { Core.Abs.ECase $1 $3 }
     | Decl ';' Exp1 { Core.Abs.EDec $1 $3 }
     | Exp2 '->' Exp1 { Core.Abs.eArrow $1 $3 }
     | Exp2 '*' Exp1 { Core.Abs.eTimes $1 $3 }
     | Exp2 { $1 }

Exp3 :: { Core.Abs.Exp }
Exp3 : 'U' { Core.Abs.ESet }
     | '1' { Core.Abs.EOne }
     | '0' { Core.Abs.Eunit }
     | Exp3 '.1' { Core.Abs.EFst $1 }
     | Exp3 '.2' { Core.Abs.ESnd $1 }
     | Ident { Core.Abs.EVar $1 }
     | 'Void' { Core.Abs.EVoid }
     | 'PN' { Core.Abs.EPN }
     | '(' Exp ')' { $2 }

Exp :: { Core.Abs.Exp }
Exp : Exp1 ',' Exp { Core.Abs.EPair $1 $3 } | Exp1 { $1 }

Exp2 :: { Core.Abs.Exp }
Exp2 : '$' Ident Exp3 { Core.Abs.ECon $2 $3 }
     | Exp2 Exp3 { Core.Abs.EApp $1 $2 }
     | Exp3 { $1 }

Decl :: { Core.Abs.Decl }
Decl : 'let' Patt1 ':' Exp1 '=' Exp1 { Core.Abs.Def $2 $4 $6 }
     | 'letrec' Patt1 ':' Exp1 '=' Exp1 { Core.Abs.Drec $2 $4 $6 }

Patt :: { Core.Abs.Patt }
Patt : Patt1 ',' Patt { Core.Abs.PPair $1 $3 } | Patt1 { $1 }

Patt1 :: { Core.Abs.Patt }
Patt1 : '_' { Core.Abs.Punit }
      | Ident { Core.Abs.PVar $1 }
      | '(' Patt ')' { $2 }

Summand :: { Core.Abs.Summand }
Summand : Ident Exp3 { Core.Abs.Summand $1 $2 }

ListSummand :: { [Core.Abs.Summand] }
ListSummand : {- empty -} { [] }
            | Summand { (:[]) $1 }
            | Summand '|' ListSummand { (:) $1 $3 }

Branch :: { Core.Abs.Branch }
Branch : Ident '->' Exp1 { Core.Abs.Branch $1 $3 }

ListBranch :: { [Core.Abs.Branch] }
ListBranch : {- empty -} { [] }
           | Branch { (:[]) $1 }
           | Branch '|' ListBranch { (:) $1 $3 }

ListIdent :: { [Core.Abs.Ident] }
ListIdent : Ident { (:[]) $1 } | Ident ListIdent { (:) $1 $2 }
{

happyError :: [Token] -> Either String a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer = tokens
}

