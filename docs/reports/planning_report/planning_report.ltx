\documentclass{article}

\usepackage[utf8]{inputenc}
\usepackage[english]{babel}
\usepackage{amsmath}
\usepackage{parskip}
\setlength{\parskip}{10pt}
\usepackage{array}
\usepackage{pgfgantt}
\usepackage{float}

\begin{document}
\title{Planning Report}
\author{Qufei Wang}
\maketitle

\section{Introduction}
\subsection{Background}
Dependent type theory is widely used in proof-assistant systems (e.g. Coq \cite{huet1997coq}, Agda \cite{norell2008dependently}, Lean \cite{de2015lean}, Idris \cite{brady2013idris}, etc.) and contributed much to their success. In any typed system, deciding whether one type is equal to another is important. In a simple type system where no type polymorphism or dependent type is used, this is done by simply checking the syntactic identity of the symbols of the types, whereas in dependently typed systems the problem becomes more complicate, since a type may contain any value as its component, making it unavoidable to do computations on types.

One common approach to deciding equality of terms in dependent type theory is \textit{normalization by evaluation} (NbE) \cite{berger1998normalization}, which reduces terms to the canonical representations for comparison. This method, however, does not scale to large theories for various reasons, among which:
\begin{itemize}
\item Producing the normal form may require more reduction steps than necessary. For example, in proving $(1 + 1) ^ {10} = 2 ^{(5 + 5)}$, it is easier if we can prove $1 + 1 == 2$ and $5 + 5 == 10$ instead of having to reduce both sides to 1024.
\item As the number of definitions using previous definitions grows, the size of terms by expanding definitions can grow very quickly. For example, the inductive definition $x_n := (x_{n-1}, x_{n-1})$ makes the normal form of $x_{n}$ grow exponentially.
\end{itemize}
In this project, we shall focus on the first issue, that is, how to perform as few constant expansions as possible when deciding the convertibility of two terms in a dependently typed system. We hope to find a common reduct before going into expensive reductions, and in the light of this, we find that a proper study of a \emph{locking/unlocking} mechanism on the \emph{definitions} of a dependent type system may provide us hints to the solution of the problem. Here, a \emph{definition} has the conceptual form $c : A = M$, which means that a \emph{constant} $c$ has type $A$ and is defined as $M$, $A$ and $M$ are just common terms of the target language. A constant is \emph{locked} when we explicitly hide its definition from the context, making only the type information accessible. It becomes \emph{unlocked} when we bring its definition back into the context again.

\subsection{Aim}
The aim of this project is to find a mechanism where \emph{definitions} in a dependently typed system could be handled more efficiently. What this means is that, we aim to develop a \emph{locking/unlocking} mechanism into a simple dependent type language, which allows us to do computations on terms with the ability to lock/unlock some of the \emph{constants}, with the hope that a proper design of the mechanism could make the type checking process (in particular, deciding the convertibility of two terms) more efficient. The target language is a simplified version of Mini-TT \cite{coquand2009simple}. On top of that, we wish to extend the language with a module system, which is based on the concept of `segment' borrowed form AutoMath \cite{automath}. The outcome of the work should be an implementation of type checker in Haskell, that illustrates the concepts above.

\subsection{Limitations}
We will not try to establish a universal mechanism that is applicable in different dependent type systems. Instead, we will only focus on the system introduced by the simple language with its specific syntax and semantics. Also, there's no guarantee that a rigorously describable mechanism could be found, and what we finally establish may only work under certain preconditions. However, just by studying the problem and giving suggestions to the possible directions to a better solution may also deemed as a valuable work.

\subsection{Specification of Issue under Investigation}
These are the questions that we'd like to address with regard to the aim we claimed.
\begin{itemize}
\item How to design the type checking algorithm in the presence of locked variables ?
\item How to find the minimum set of constants to be unlocked in a non-exhaustive way, for a term to be checked as valid ?
\item Is there a way to use the knowledge about the minimum set of constants needed for each constant in the context, to make type checking a new term more efficient ?
\end{itemize}

\section{Methodology}
In the work already done so far, we've implemented an evaluation operation on terms with the ability to hide some constants. In an unpublished draft (which we will refer to as ``transparency'' and will be submitted together with this report as a reference), the author proposed a mechanism with transparency/opacity configuration which may provide us some inspiration on a further development of our locking/unlocking mechanism.

Also, since the problem of \emph{definition} has close relation with \emph{evaluation}, and the evaluation mechanism in a dependent type language has its root in typed $\lambda$-calculus, a familiarity with the literatures in this field may also be helpful. For example, consider the simple problem of checking the convertibility of two terms $id\; A\; M$ and $M$, where
\begin{align*}
  id : [A : U] \, A \to A &= [A : U]\,[x : A]\, x \\
  M : A &= \alpha
\end{align*}
Suppose $M$ is type correct and $\alpha$ is a constant whose value requires enormous computation. Without going into the details of $\alpha$, we can instantly know that these two terms are equal. However, an evaluation mechanism may go as far as computing the value of $M$, which makes the problem unnecessarily complicate (or even undecidable!).

\emph{Laziness}, as a strategy of evaluation used in Haskell, can help to avoid the over-computed situation. Another way to think about this is if we allow the user to specify certain algebraic properties of the constants (e.g. $\forall A \in U, x \in A \Rightarrow \; id\; A\; x = x$) and suggest the properties to the type checker, then the problem could be solved more efficiently (just like in Agda, one can prove properties of data types and use the properties as functions for further proof). The ideal solution would be that the type checker can deduce the properties itself and choose the properties intelligently from the context for the further reasoning.

\section{Schedule}
The schedule of the remaining work is shown in figure \ref{fig:task_schedule}. The details of each task is shown in table \ref{tab:task_names}. The schedule covers time from April 19, 2021 to September 12, 2021, in a total of 20 weeks (when taking into consideration the extension).
\begin{figure}[H]
\begin{center}
\begin{ganttchart}[y unit title=.45cm,
y unit chart=.45cm,
vgrid]{1}{20}
  \gantttitle{Apr.}{2}
  \gantttitle{May}{4}
  \gantttitle{June}{4}
  \gantttitle{July}{4}
  \gantttitle{Aug.}{4}
  \gantttitle{Sept.}{2} \\
  \gantttitle{Weeks}{20} \\
  \gantttitlelist{1,...,20}{1} \\
  \ganttbar [bar/.append style={fill=red}]{Task-1}{1}{1} \\
  \ganttbar [bar/.append style={fill=green}]{Task-2}{2}{5} \\
  \ganttbar [bar/.append style={fill=red}] {Task-3}{3}{6} \\
  \ganttbar [bar/.append style={fill=blue}] {Task-4}{7}{8} \\
  \ganttbar [bar/.append style={fill=yellow}] {Task-5}{7}{9} \\
  \ganttbar [bar/.append style={fill=green}] {Task-6}{9}{11} \\
  \ganttbar [bar/.append style={fill=red}] {Task-7}{11}{14} \\
  \ganttbar [bar/.append style={fill=yellow}]{Task-8}{17}{20} \\
  \ganttbar [bar/.append style={fill=blue}] {Task-9}{15}{20} \\
  %\ganttlink{elem1}{elem4}
\end{ganttchart}
\end{center}
\caption{Task Schedule}
\label{fig:task_schedule}
\end{figure}

\begin{table}[h]
  \centering
  \begin{tabular}{| c | m{50mm} | c | c | c |} \hline
    & Tasks & Duration(weeks) & Start Date & End Date \\ \hline
    1 & \textbf{Coding} \newline $\eta$-conversion & 1 & Apr. 19 & Apr. 25 \\ \hline
    2 & \textbf{Literature Study} \newline evaluation mechanism in typed $\lambda$-calculus & 4 & Apr. 26  & May 23 \\ \hline
    3 & \textbf{Coding} \newline development on the \emph{definition} mechanism & 4 & May 3 & May 30 \\ \hline
    4 & \textbf{Writing} \newline Half-time report & 2 & May 31 & June 13 \\ \hline
    5 & \textbf{Presentation} \newline attend opposition presentation & 3 & May 31 & June 20 \\ \hline
    6 & \textbf{Literature Study} \newline AUTOMATH system & 3 & June 14 & July 4 \\ \hline
    7 & \textbf{Coding} \newline a module mechanism based on the notion `segment' from AUTOMATH & 4 & June 28 & July 25 \\ \hline
    8 & \textbf{Presentation} \newline final presentation & 4 & Aug. 16 & Sep. 12 \\ \hline
    9 & \textbf{Writing} \newline Final report & 6 & July 26 & Sep. 12 \\ \hline
  \end{tabular}
  \caption{Task Detail}
  \label{tab:task_names}
\end{table}

\bibliographystyle{ieeetr}
\bibliography{my_bib.bib}

\end{document}