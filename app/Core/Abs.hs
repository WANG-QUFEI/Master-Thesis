-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

module Core.Abs where

import Prelude (Char, Double, Int, Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)

newtype Id = Id ((Int, Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Context = Ctx [Decl]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Exp
    = U
    | Var Id
    | App Exp Exp
    | Arr Exp Exp
    | Pi Decl Exp
    | Where Exp Decl
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Decl = Dec Id Exp | Def Id Exp Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

