-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

{-# LANGUAGE GeneralizedNewtypeDeriving #-}

module Core.Abs where

import Prelude (Char, Double, Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)
import qualified Data.String

newtype Id = Id String
  deriving (C.Eq, C.Ord, C.Show, C.Read, Data.String.IsString)

data Program = Prog [Exp]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Exp
    = EPostu Id Exp
    | EVar Id
    | ESet
    | EAPP Exp Exp
    | EImpl Exp Exp
    | ELam Exp Exp
    | EDec Decl Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Decl = Def Id Exp Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

