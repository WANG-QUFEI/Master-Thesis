-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

module Core.Abs where

import Prelude (Char, Double, Int, Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)

newtype Id = Id ((Int, Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Context = Ctx [Def]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data CExp
    = U
    | Var Id
    | App CExp CExp
    | Arr CExp CExp
    | Pi Dec CExp
    | Where Def CExp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Dec = Dec Id CExp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Def = Def Id CExp CExp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

