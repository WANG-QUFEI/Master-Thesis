-- Haskell module generated by the BNF converter

module Core.Skel where

import qualified Core.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transId :: Core.Abs.Id -> Result
transId x = case x of
  Core.Abs.Id string -> failure x
transProgram :: Core.Abs.Program -> Result
transProgram x = case x of
  Core.Abs.Prog exps -> failure x
transExp :: Core.Abs.Exp -> Result
transExp x = case x of
  Core.Abs.EPostu id exp -> failure x
  Core.Abs.EVar id -> failure x
  Core.Abs.ESet -> failure x
  Core.Abs.EAPP exp1 exp2 -> failure x
  Core.Abs.EImpl exp1 exp2 -> failure x
  Core.Abs.ELam exp1 exp2 -> failure x
  Core.Abs.EDec decl exp -> failure x
transDecl :: Core.Abs.Decl -> Result
transDecl x = case x of
  Core.Abs.Def id exp1 exp2 -> failure x

