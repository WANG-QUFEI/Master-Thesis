-- Haskell module generated by the BNF converter

module Core.Skel where

import qualified Core.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transId :: Core.Abs.Id -> Result
transId x = case x of
  Core.Abs.Id string -> failure x
transContext :: Core.Abs.Context -> Result
transContext x = case x of
  Core.Abs.Ctx defs -> failure x
transCExp :: Core.Abs.CExp -> Result
transCExp x = case x of
  Core.Abs.U -> failure x
  Core.Abs.Var id -> failure x
  Core.Abs.App cexp1 cexp2 -> failure x
  Core.Abs.Arr cexp1 cexp2 -> failure x
  Core.Abs.Pi dec cexp -> failure x
  Core.Abs.Where def cexp -> failure x
transDec :: Core.Abs.Dec -> Result
transDec x = case x of
  Core.Abs.Dec id cexp -> failure x
transDef :: Core.Abs.Def -> Result
transDef x = case x of
  Core.Abs.Def id cexp1 cexp2 -> failure x

