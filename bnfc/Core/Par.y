-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module Core.Par
  ( happyError
  , myLexer
  , pContext
  ) where
import qualified Core.Abs
import Core.Lex
}

%name pContext Context
-- no lexer declaration
%monad { Either String } { (>>=) } { return }
%tokentype {Token}
%token
  '(' { PT _ (TS _ 1) }
  ')' { PT _ (TS _ 2) }
  '*' { PT _ (TS _ 3) }
  '->' { PT _ (TS _ 4) }
  ':' { PT _ (TS _ 5) }
  ';' { PT _ (TS _ 6) }
  '=' { PT _ (TS _ 7) }
  '[' { PT _ (TS _ 8) }
  ']' { PT _ (TS _ 9) }
  L_Id { PT _ (T_Id _) }

%%

Id :: { Core.Abs.Id}
Id  : L_Id { Core.Abs.Id (mkPosToken $1) }

Context :: { Core.Abs.Context }
Context : ListDecl { Core.Abs.Ctx $1 }

Exp3 :: { Core.Abs.Exp }
Exp3 : '*' { Core.Abs.U }
     | Id { Core.Abs.Var $1 }
     | '(' Exp ')' { $2 }

Exp2 :: { Core.Abs.Exp }
Exp2 : Exp2 Exp3 { Core.Abs.App $1 $2 } | Exp3 { $1 }

Exp1 :: { Core.Abs.Exp }
Exp1 : Exp2 '->' Exp1 { Core.Abs.Arr $1 $3 }
     | '[' Decl ']' Exp1 { Core.Abs.Pi $2 $4 }
     | Exp2 { $1 }

Exp :: { Core.Abs.Exp }
Exp : Exp '[' Decl ']' { Core.Abs.Where $1 $3 } | Exp1 { $1 }

Decl :: { Core.Abs.Decl }
Decl : Id ':' Exp { Core.Abs.Dec $1 $3 }
     | Id ':' Exp '=' Exp { Core.Abs.Def $1 $3 $5 }

ListDecl :: { [Core.Abs.Decl] }
ListDecl : {- empty -} { [] }
         | Decl { (:[]) $1 }
         | Decl ';' ListDecl { (:) $1 $3 }
{

happyError :: [Token] -> Either String a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer = tokens
}

