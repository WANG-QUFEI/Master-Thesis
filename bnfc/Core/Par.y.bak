-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module Core.Par
  ( happyError
  , myLexer
  , pProgram
  ) where
import qualified Core.Abs
import Core.Lex
}

%name pProgram Program
-- no lexer declaration
%monad { Either String } { (>>=) } { return }
%tokentype {Token}
%token
  '(' { PT _ (TS _ 1) }
  ')' { PT _ (TS _ 2) }
  '*' { PT _ (TS _ 3) }
  '->' { PT _ (TS _ 4) }
  ':' { PT _ (TS _ 5) }
  ';' { PT _ (TS _ 6) }
  '=' { PT _ (TS _ 7) }
  '[' { PT _ (TS _ 8) }
  ']' { PT _ (TS _ 9) }
  L_Id { PT _ (T_Id $$) }

%%

Id :: { Core.Abs.Id}
Id  : L_Id { Core.Abs.Id $1 }

Program :: { Core.Abs.Program }
Program : ListExp { Core.Abs.Prog $1 }

Exp4 :: { Core.Abs.Exp }
Exp4 : Id ':' Exp { Core.Abs.EPostu $1 $3 } | '(' Exp ')' { $2 }

Exp3 :: { Core.Abs.Exp }
Exp3 : Id { Core.Abs.EVar $1 }
     | '*' { Core.Abs.ESet }
     | Exp4 { $1 }

Exp2 :: { Core.Abs.Exp }
Exp2 : Exp2 Exp3 { Core.Abs.EAPP $1 $2 } | Exp3 { $1 }

Exp1 :: { Core.Abs.Exp }
Exp1 : Exp2 '->' Exp1 { Core.Abs.EArrow $1 $3 }
     | '[' Exp4 ']' Exp1 { Core.Abs.EAbs $2 $4 }
     | Exp2 { $1 }

Exp :: { Core.Abs.Exp }
Exp : Decl ';' Exp { Core.Abs.EDec $1 $3 } | Exp1 { $1 }

Decl :: { Core.Abs.Decl }
Decl : Id ':' Exp '=' Exp { Core.Abs.Def $1 $3 $5 }

ListExp :: { [Core.Abs.Exp] }
ListExp : {- empty -} { [] }
        | Exp { (:[]) $1 }
        | Exp ';' ListExp { (:) $1 $3 }
{

happyError :: [Token] -> Either String a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer = tokens
}

