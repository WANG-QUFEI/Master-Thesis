-- This Happy file was machine-generated by the BNF converter
{
{-# OPTIONS_GHC -fno-warn-incomplete-patterns -fno-warn-overlapping-patterns #-}
module SimMiniTT.Par
  ( happyError
  , myLexer
  , pProgram
  ) where
import qualified SimMiniTT.Abs
import SimMiniTT.Lex
}

%name pProgram Program
-- no lexer declaration
%monad { Either String } { (>>=) } { return }
%tokentype {Token}
%token
  '(' { PT _ (TS _ 1) }
  ')' { PT _ (TS _ 2) }
  '*' { PT _ (TS _ 3) }
  '->' { PT _ (TS _ 4) }
  ':' { PT _ (TS _ 5) }
  ';' { PT _ (TS _ 6) }
  '=' { PT _ (TS _ 7) }
  '[' { PT _ (TS _ 8) }
  ']' { PT _ (TS _ 9) }
  '→' { PT _ (TS _ 10) }
  L_Id { PT _ (T_Id _) }

%%

Id :: { SimMiniTT.Abs.Id}
Id  : L_Id { SimMiniTT.Abs.Id (mkPosToken $1) }

Program :: { SimMiniTT.Abs.Program }
Program : ListDecl { SimMiniTT.Abs.Prog $1 }

Exp3 :: { SimMiniTT.Abs.Exp }
Exp3 : Id { SimMiniTT.Abs.EVar $1 }
     | '*' { SimMiniTT.Abs.ESet }
     | '(' Exp ')' { $2 }

Exp2 :: { SimMiniTT.Abs.Exp }
Exp2 : Exp2 Exp3 { SimMiniTT.Abs.EAPP $1 $2 } | Exp3 { $1 }

Exp1 :: { SimMiniTT.Abs.Exp }
Exp1 : Exp2 '->' Exp1 { SimMiniTT.Abs.EArrow $1 $3 }
     | Exp2 '→' Exp1 { SimMiniTT.Abs.EArrow $1 $3 }
     | Exp2 { $1 }

Exp :: { SimMiniTT.Abs.Exp }
Exp : ListParam Exp1 { SimMiniTT.Abs.EAbs $1 $2 } | Exp1 { $1 }

Param :: { SimMiniTT.Abs.Param }
Param : '[' Decl1 ']' { SimMiniTT.Abs.Param $2 }

Decl1 :: { SimMiniTT.Abs.Decl }
Decl1 : Id ':' Exp { SimMiniTT.Abs.D $1 $3 } | '(' Decl ')' { $2 }

Decl :: { SimMiniTT.Abs.Decl }
Decl : Id ':' Exp '=' Exp { SimMiniTT.Abs.Def $1 $3 $5 }
     | Decl1 { $1 }

ListDecl :: { [SimMiniTT.Abs.Decl] }
ListDecl : {- empty -} { [] }
         | Decl { (:[]) $1 }
         | Decl ';' ListDecl { (:) $1 $3 }

ListParam :: { [SimMiniTT.Abs.Param] }
ListParam : Param { (:[]) $1 } | Param ListParam { (:) $1 $2 }
{

happyError :: [Token] -> Either String a
happyError ts = Left $
  "syntax error at " ++ tokenPos ts ++
  case ts of
    []      -> []
    [Err _] -> " due to lexer error"
    t:_     -> " before `" ++ (prToken t) ++ "'"

myLexer = tokens
}

