-- Haskell module generated by the BNF converter

module SimMiniTT.Skel where

import qualified SimMiniTT.Abs

type Err = Either String
type Result = Err String

failure :: Show a => a -> Result
failure x = Left $ "Undefined case: " ++ show x

transId :: SimMiniTT.Abs.Id -> Result
transId x = case x of
  SimMiniTT.Abs.Id string -> failure x
transProgram :: SimMiniTT.Abs.Program -> Result
transProgram x = case x of
  SimMiniTT.Abs.Prog decls -> failure x
transExp :: SimMiniTT.Abs.Exp -> Result
transExp x = case x of
  SimMiniTT.Abs.EVar id -> failure x
  SimMiniTT.Abs.ESet -> failure x
  SimMiniTT.Abs.EAPP exp1 exp2 -> failure x
  SimMiniTT.Abs.EArrow exp1 exp2 -> failure x
  SimMiniTT.Abs.EAbs params exp -> failure x
transParam :: SimMiniTT.Abs.Param -> Result
transParam x = case x of
  SimMiniTT.Abs.Param decl -> failure x
transDecl :: SimMiniTT.Abs.Decl -> Result
transDecl x = case x of
  SimMiniTT.Abs.D id exp -> failure x
  SimMiniTT.Abs.Def id exp1 exp2 -> failure x

