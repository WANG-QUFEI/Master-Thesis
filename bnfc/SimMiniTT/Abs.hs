-- Haskell data types for the abstract syntax.
-- Generated by the BNF converter.

module SimMiniTT.Abs where

import Prelude (Char, Double, Int, Integer, String)
import qualified Prelude as C (Eq, Ord, Show, Read)

newtype Id = Id ((Int, Int), String)
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Program = Prog [Decl]
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Exp
    = EVar Id | ESet | EAPP Exp Exp | EArrow Exp Exp | EAbs [Param] Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Param = Param Decl
  deriving (C.Eq, C.Ord, C.Show, C.Read)

data Decl = D Id Exp | Def Id Exp Exp
  deriving (C.Eq, C.Ord, C.Show, C.Read)

